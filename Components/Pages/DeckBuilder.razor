@page "/"
@rendermode InteractiveServer

@using Microsoft.AspNetCore.Authorization
@using MTG_Project.Services
@using MTG_Project.Models
@using Type = MTG_Project.Models.Type;

@attribute [Authorize]

<PageTitle>MTG Deck Builder</PageTitle>

<h1>Welcome to the MTG Deck Builder!</h1>

<p>Choose your cards to build a deck.</p>

<EditForm Model="cardSearch" OnSubmit="SearchCards" class="card-search">
    <div class="card-search-text">
        <div class="label-textbox">
            <label for="cardSearchTerm">Search for cards:</label>
            <InputText @bind-Value="cardSearch.CardSearchTerm" placeholder="(Optional) Search by cardname..." />
        </div>
        <div class="label-textbox">
            <label for="artistSearchTerm">Search for artist:</label>
            <InputText @bind-Value="cardSearch.ArtistSearchTerm" placeholder="(Optional) Search by artist..." />
        </div>
    </div>
    <div class="card-search-filter">
        <p>Filter:</p>
        <!-- Type, Set, Rarity, Color -->
        <div class="card-search-filter-type">
            <label for="cardType">Type:</label>
            <select @bind="cardSearch.CardType">
                <option selected="selected" value="0">All Types</option>
                @foreach (Type type in services.GetAllTypes())
                {
                    <option value="@type.Id">@type.Name (@type.Type1)</option>
                }
            </select>
        </div>
    </div>
    <div class="card-search-sort">
        Sort:
        <select @bind="sortValue">
            <option value="Id">Id</option>
            <option value="Name">Name</option>
            <option value="Artist">Artist</option>
            <option value="RarityCodeNavigation">Rarity</option>
        </select>
    </div>
    <input type="submit" value="Search" />
</EditForm>

<div class="card-display">
    <h2>Cards</h2>

    <ul class="image-list">
        @foreach (Card card in myCards)
        {
            <li>
                <figure class="figure-flex">
                    @if (card.OriginalImageUrl != null)
                    {
                        <img src="@card.OriginalImageUrl" alt="@card.Name" />
                    }
                    else
                    {
                        string imageUrl = "https://api.scryfall.com/cards/named?exact=" + card.Name + "&format=image";
                        <img src="@imageUrl" alt="@card.Name" />
                    }
                    <figcaption>@card.Name</figcaption>
                </figure>
            </li>
        }
    </ul>

    @if (myCards.Count == 0)
    {
        <h3>No cards found.</h3>
    }
    else
    {
        <ul class="card-nav">
            @if (pageNumber > 1)
            {
                <li class="card-nav-item">
                    <button class="card-nav-link" @onclick="PrevPage">Prev</button>
                </li>
            }
            <li class="card-nav-page">@pageNumber</li>
            @if (hasMoreCards)
            {
                <li class="card-nav-item">
                    <button class="card-nav-link" @onclick="NextPage">Next</button>
                </li>
            }
        </ul>
    }
</div>

@code {
    IList<Card> myCards;

    Services services = new Services();

    int pageNumber;
    int pageSize = 16;
    bool hasMoreCards = true;

    string sortValue = "Id";

    CardSearch cardSearch = new CardSearch();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        pageNumber = 1;
        LoadCards();
    }

    void LoadCards()
    {
        IList<Card> cards;

        if (cardSearch.CardSearchTerm == null &&
            cardSearch.ArtistSearchTerm == null &&
            cardSearch.CardType == 0 &&
            cardSearch.SetCode == 0 &&
            cardSearch.RarityCode == null &&
            cardSearch.Colors == null)
        {
            cards = services.GetAllCards(pageNumber, pageSize, sortValue);
        }
        else
        {
            cards = services.GetCards(sortValue, pageNumber, pageSize, cardSearch.CardSearchTerm, cardSearch.ArtistSearchTerm, cardSearch.CardType);
        }

        hasMoreCards = cards.Count == pageSize;
        myCards = cards;
    }

    void SearchCards()
    {
        pageNumber = 1;
        LoadCards();
    }

    void PrevPage()
    {
        if (pageNumber > 1)
        {
            pageNumber--;
            LoadCards();
        }
    }

    void NextPage()
    {
        pageNumber++;
        LoadCards();
    }

    public class CardSearch
    {
        public string CardSearchTerm { get; set; }
        public string ArtistSearchTerm { get; set; }
        public int CardType { get; set; }
        public int SetCode { get; set; }
        public string RarityCode { get; set; }
        public string[] Colors { get; set; }
    }
}
